server:
  port: 1000
  
spring:
  application:
    name: Zuul
    
  zipkin: 
    base-url: http://localhost:7000
    
  sleuth:
    sampler:
      # Sleuth链路跟踪抽样百分比
      percentage: 1
      
debug: true
    
eureka: 
 client:  
  service-url:  
    defaultZone: http://eureka-server1:1001/eureka/    
    
# zuul的路由配置，如果有多重配置情况，则按照配置顺序选择前边的    
zuul:
  routes: 
    hello-service:
      # 采用zuul.routes.<route>.path/url两个配置的组合，确定一个符合/hello-api/**的请求转发到http://localhost:3001/的路由功能。
      # 这实际是脱离了Eureka的服务治理环境，因为需要配置服务的真实路径，不利于更改维护，所以不推荐。
      path: /hello-api/**
      url: http://localhost:3001/
      # 单独设置重试机制
      retryable: false
    hello-service2:
      path: /hello-api/**
      # 采用serviceId指定注册服务名称
      serviceId: Service-Consume
    # 使用  zuul.routes.<serviceId>.path进行简洁配置。
    # 默认路由，zuul将对eureka中注册的服务采用等同于zuul.routes.<serviceId>=/<serviceId>/**的配置
    Service-Consume: /hello-api/**
  # 忽略指定服务的默认路由，*代表全部
  ignored-services: '*'
  
  # 设置请求的前辍
  prefix: 
  # 设置全局重试机制
  retryable: false
  
  # 采用<FilterClassName>.<fitlerType>.disable设置指定过滤器是否开启
  CustomFilter: 
    pre:  
      disable:  false
  
ribbon: 
  eureka: 
    # 是否开启eureka支持，在整合eureka的环境中设置为true，以支持从eureka读取服务，以及使用serviceId的路由；如果没有eureka则需要设置为false，并配置listOfServers。
    enabled:  true

# 可以使用<serviceId>.ribbon.listOfServers与zuul.routes.route.<serviceId>配合，指定其路由的具体地址。
Service-Consume:  
  ribbon: 
    listOfServers:  